From 1c131f25720583a86599a903b582c0222ad4d074 Mon Sep 17 00:00:00 2001
From: AlexTMjugador <AlexTMjugador@users.noreply.github.com>
Date: Wed, 15 Jul 2020 14:05:42 +0200
Subject: [PATCH] package/lvm2: bump version to 2.03.09, fix musl compilation

More recent versions of lvm2 render a Buildroot patch
useless. On the other hand, there are well known
patches that fix lvm2 not being able to compile with
musl, due to the usage of glibc specific constructs
in a few places.

As we use musl, integrate those patches, and while
we are at it, update the patch that adds the option
to disable symvers.

Signed-off-by: AlexTMjugador <AlexTMjugador@users.noreply.github.com>
---
 ...gure-Introduce-enable-symvers-option.patch | 172 ++++++++++++------
 package/lvm2/0002-fix-stdio-usage.patch       |  71 ++++++++
 ...supported-options-event-timeout-rule.patch |  33 ----
 package/lvm2/0003-portability.patch           |  58 ++++++
 package/lvm2/Config.in                        |  18 +-
 package/lvm2/lvm2.hash                        |   4 +-
 package/lvm2/lvm2.mk                          |   4 +-
 7 files changed, 254 insertions(+), 106 deletions(-)
 create mode 100644 package/lvm2/0002-fix-stdio-usage.patch
 delete mode 100644 package/lvm2/0002-udev-remove-unsupported-options-event-timeout-rule.patch
 create mode 100644 package/lvm2/0003-portability.patch

diff --git a/package/lvm2/0001-configure-Introduce-enable-symvers-option.patch b/package/lvm2/0001-configure-Introduce-enable-symvers-option.patch
index 7ef153313c..ff90490916 100644
--- a/package/lvm2/0001-configure-Introduce-enable-symvers-option.patch
+++ b/package/lvm2/0001-configure-Introduce-enable-symvers-option.patch
@@ -1,4 +1,4 @@
-From 94d71c49eb1682a73465eb162b0a059561168bb2 Mon Sep 17 00:00:00 2001
+From 9c35d963bb96f87dfcd60053a789068b836f96d0 Mon Sep 17 00:00:00 2001
 From: Marcin Niestroj <m.niestroj@grinn-global.com>
 Date: Fri, 20 Jul 2018 14:26:44 +0200
 Subject: [PATCH] configure: Introduce --enable-symvers option
@@ -24,23 +24,30 @@ uclibc library fixes segmentation fault error described above, due to
 lack of several versions of the same symbol in libdevmapper.so
 library.
 
+AlexTMjugador: update this patch to the latest LVM2 version.
+
 Signed-off-by: Marcin Niestroj <m.niestroj@grinn-global.com>
+Signed-off-by: AlexTMjugador <AlexTMjugador@users.noreply.github.com>
 ---
- configure                 | 32 ++++++++++++++++++++++++++++++--
- configure.ac              | 28 +++++++++++++++++++++++++---
- include/configure.h.in    |  3 +++
- lib/misc/lib.h            | 10 +++++-----
- libdm/datastruct/bitset.c |  5 +----
- libdm/ioctl/libdm-iface.c |  2 +-
- libdm/libdm-deptree.c     |  2 +-
- libdm/libdm-stats.c       |  2 +-
- 8 files changed, 67 insertions(+), 17 deletions(-)
+ configure                         | 32 +++++++++++++++++++++++++++++--
+ configure.ac                      | 27 ++++++++++++++++++++++++--
+ device_mapper/datastruct/bitset.c |  2 +-
+ device_mapper/ioctl/libdm-iface.c |  2 +-
+ device_mapper/libdm-deptree.c     |  2 +-
+ include/configure.h.in            |  3 +++
+ lib/misc/lib.h                    | 10 +++++-----
+ libdm/datastruct/bitset.c         |  2 +-
+ libdm/ioctl/libdm-iface.c         |  2 +-
+ libdm/libdm-deptree.c             |  2 +-
+ libdm/libdm-stats.c               |  2 +-
+ libdm/misc/dmlib.h                | 10 +++++-----
+ 12 files changed, 75 insertions(+), 21 deletions(-)
 
 diff --git a/configure b/configure
-index 7d945dfa8..94cd6b1ea 100755
+index 6dd7eda..40675df 100755
 --- a/configure
 +++ b/configure
-@@ -975,6 +975,7 @@ enable_fsadm
+@@ -959,6 +959,7 @@ enable_fsadm
  enable_blkdeactivate
  enable_dmeventd
  enable_selinux
@@ -48,7 +55,7 @@ index 7d945dfa8..94cd6b1ea 100755
  enable_nls
  with_localedir
  with_confdir
-@@ -1725,6 +1726,9 @@ Optional Features:
+@@ -1677,6 +1678,9 @@ Optional Features:
    --disable-blkdeactivate disable blkdeactivate
    --enable-dmeventd       enable the device-mapper event daemon
    --disable-selinux       disable selinux support
@@ -58,23 +65,23 @@ index 7d945dfa8..94cd6b1ea 100755
    --enable-nls            enable Native Language Support
  
  Optional Packages:
-@@ -3156,7 +3160,6 @@ if test -z "$CFLAGS"; then :
+@@ -3077,7 +3081,6 @@ if test -z "$CFLAGS"; then :
  fi
  case "$host_os" in
  	linux*)
--		CLDFLAGS="$CLDFLAGS -Wl,--version-script,.export.sym"
+-		CLDFLAGS="${CLDFLAGS-"$LDFLAGS"} -Wl,--version-script,.export.sym"
  		# equivalent to -rdynamic
  		ELDFLAGS="-Wl,--export-dynamic"
  		# FIXME Generate list and use --dynamic-list=.dlopen.sym
-@@ -3178,7 +3181,6 @@ case "$host_os" in
+@@ -3098,7 +3101,6 @@ case "$host_os" in
  		;;
  	darwin*)
  		CFLAGS="$CFLAGS -no-cpp-precomp -fno-common"
--		CLDFLAGS="$CLDFLAGS"
+-		CLDFLAGS="${CLDFLAGS-"$LDFLAGS"}"
  		ELDFLAGS=
  		CLDWHOLEARCHIVE="-all_load"
  		CLDNOWHOLEARCHIVE=
-@@ -14401,6 +14403,32 @@ done
+@@ -12969,6 +12971,32 @@ done
  	LIBS=$lvm_saved_libs
  fi
  
@@ -100,7 +107,7 @@ index 7d945dfa8..94cd6b1ea 100755
 +$as_echo "#define GNU_SYMVER 1" >>confdefs.h
 +
 +  case "$host_os" in
-+    linux*) CLDFLAGS="$CLDFLAGS -Wl,--version-script,.export.sym" ;;
++    linux*) CLDFLAGS="${CLDFLAGS-"$LDFLAGS"} -Wl,--version-script,.export.sym" ;;
 +  esac
 +fi
 +
@@ -108,32 +115,26 @@ index 7d945dfa8..94cd6b1ea 100755
  { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether to enable internationalisation" >&5
  $as_echo_n "checking whether to enable internationalisation... " >&6; }
 diff --git a/configure.ac b/configure.ac
-index e427708cd..2e8712f92 100644
+index 74ca201..dd68389 100644
 --- a/configure.ac
 +++ b/configure.ac
-@@ -30,13 +30,11 @@ AC_CANONICAL_TARGET([])
+@@ -30,7 +30,6 @@ AC_CANONICAL_TARGET([])
  AS_IF([test -z "$CFLAGS"], [COPTIMISE_FLAG="-O2"])
  case "$host_os" in
  	linux*)
--		CLDFLAGS="$CLDFLAGS -Wl,--version-script,.export.sym"
+-		CLDFLAGS="${CLDFLAGS-"$LDFLAGS"} -Wl,--version-script,.export.sym"
  		# equivalent to -rdynamic
  		ELDFLAGS="-Wl,--export-dynamic"
  		# FIXME Generate list and use --dynamic-list=.dlopen.sym
- 		CLDWHOLEARCHIVE="-Wl,-whole-archive"
- 		CLDNOWHOLEARCHIVE="-Wl,-no-whole-archive"
--		LDDEPS="$LDDEPS .export.sym"
- 		LIB_SUFFIX=so
- 		DEVMAPPER=yes
- 		BUILD_LVMETAD=no
-@@ -52,7 +50,6 @@ case "$host_os" in
+@@ -51,7 +50,6 @@ case "$host_os" in
  		;;
  	darwin*)
  		CFLAGS="$CFLAGS -no-cpp-precomp -fno-common"
--		CLDFLAGS="$CLDFLAGS"
+-		CLDFLAGS="${CLDFLAGS-"$LDFLAGS"}"
  		ELDFLAGS=
  		CLDWHOLEARCHIVE="-all_load"
  		CLDNOWHOLEARCHIVE=
-@@ -1656,6 +1653,31 @@ package as well (which may be called readline-devel or something similar).])
+@@ -1404,6 +1402,31 @@ package as well (which may be called readline-devel or something similar).])
  	LIBS=$lvm_saved_libs
  fi
  
@@ -156,7 +157,7 @@ index e427708cd..2e8712f92 100644
 +            [Define to use GNU versioning in the shared library.])
 +  case "$host_os" in
 +    linux*)
-+      CLDFLAGS="$CLDFLAGS -Wl,--version-script,.export.sym"
++      CLDFLAGS="${CLDFLAGS-"$LDFLAGS"} -Wl,--version-script,.export.sym"
 +      LDDEPS="$LDDEPS .export.sym"
 +      ;;
 +  esac
@@ -165,11 +166,50 @@ index e427708cd..2e8712f92 100644
  ################################################################################
  dnl -- Internationalisation stuff
  AC_MSG_CHECKING(whether to enable internationalisation)
+diff --git a/device_mapper/datastruct/bitset.c b/device_mapper/datastruct/bitset.c
+index fc2c3c3..9733c53 100644
+--- a/device_mapper/datastruct/bitset.c
++++ b/device_mapper/datastruct/bitset.c
+@@ -243,7 +243,7 @@ bad:
+ 	return NULL;
+ }
+ 
+-#if defined(__GNUC__)
++#if defined(GNU_SYMVER)
+ /*
+  * Maintain backward compatibility with older versions that did not
+  * accept a 'min_num_bits' argument to dm_bitset_parse_list().
+diff --git a/device_mapper/ioctl/libdm-iface.c b/device_mapper/ioctl/libdm-iface.c
+index fe04af8..69e0b0b 100644
+--- a/device_mapper/ioctl/libdm-iface.c
++++ b/device_mapper/ioctl/libdm-iface.c
+@@ -2162,7 +2162,7 @@ void dm_lib_exit(void)
+ 	_version_checked = 0;
+ }
+ 
+-#if defined(__GNUC__)
++#if defined(GNU_SYMVER)
+ /*
+  * Maintain binary backward compatibility.
+  * Version script mechanism works with 'gcc' compatible compilers only.
+diff --git a/device_mapper/libdm-deptree.c b/device_mapper/libdm-deptree.c
+index 7fac6ab..a3b25dc 100644
+--- a/device_mapper/libdm-deptree.c
++++ b/device_mapper/libdm-deptree.c
+@@ -4143,7 +4143,7 @@ void dm_tree_node_set_callback(struct dm_tree_node *dnode,
+ 	dnode->callback_data = data;
+ }
+ 
+-#if defined(__GNUC__)
++#if defined(GNU_SYMVER)
+ /*
+  * Backward compatible implementations.
+  *
 diff --git a/include/configure.h.in b/include/configure.h.in
-index 15fd150ed..7a07a10ef 100644
+index 91a3a7d..eb1d870 100644
 --- a/include/configure.h.in
 +++ b/include/configure.h.in
-@@ -147,6 +147,9 @@
+@@ -129,6 +129,9 @@
  /* Path to fsadm binary. */
  #undef FSADM_PATH
  
@@ -180,10 +220,10 @@ index 15fd150ed..7a07a10ef 100644
  #undef HAVE_ALARM
  
 diff --git a/lib/misc/lib.h b/lib/misc/lib.h
-index d7fa5c721..7cf98f932 100644
+index c14f437..a39d9cf 100644
 --- a/lib/misc/lib.h
 +++ b/lib/misc/lib.h
-@@ -41,16 +41,16 @@
+@@ -36,16 +36,16 @@
   * macro DM_EXPORT_SYMBOL to export the function and bind it to the
   * specified version string.
   *
@@ -204,7 +244,7 @@ index d7fa5c721..7cf98f932 100644
   *   // Backward compatible dm_foo() version 1.02.104
   *   int dm_foo_v1_02_104(void);
   *   int dm_foo_v1_02_104(void)
-@@ -67,7 +67,7 @@
+@@ -62,7 +62,7 @@
   * versions of library symbols prior to the introduction of symbol
   * versioning: it must never be used for new symbols.
   */
@@ -214,7 +254,7 @@ index d7fa5c721..7cf98f932 100644
  	__asm__(".symver " #func "_v" #ver ", " #func "@DM_" #ver )
  #define DM_EXPORT_SYMBOL_BASE(func) \
 diff --git a/libdm/datastruct/bitset.c b/libdm/datastruct/bitset.c
-index b0826e1eb..2ec3f8f84 100644
+index 06bd31a..be1c3ba 100644
 --- a/libdm/datastruct/bitset.c
 +++ b/libdm/datastruct/bitset.c
 @@ -242,7 +242,7 @@ bad:
@@ -226,19 +266,11 @@ index b0826e1eb..2ec3f8f84 100644
  /*
   * Maintain backward compatibility with older versions that did not
   * accept a 'min_num_bits' argument to dm_bitset_parse_list().
-@@ -253,7 +253,4 @@ dm_bitset_t dm_bitset_parse_list_v1_02_129(const char *str, struct dm_pool *mem)
- 	return dm_bitset_parse_list(str, mem, 0);
- }
- DM_EXPORT_SYMBOL(dm_bitset_parse_list, 1_02_129);
--
--#else /* if defined(__GNUC__) */
--
- #endif
 diff --git a/libdm/ioctl/libdm-iface.c b/libdm/ioctl/libdm-iface.c
-index 769b69c1b..28e2eadee 100644
+index 7ad549c..119b6fe 100644
 --- a/libdm/ioctl/libdm-iface.c
 +++ b/libdm/ioctl/libdm-iface.c
-@@ -2145,7 +2145,7 @@ void dm_lib_exit(void)
+@@ -2188,7 +2188,7 @@ void dm_lib_exit(void)
  	_version_checked = 0;
  }
  
@@ -248,10 +280,10 @@ index 769b69c1b..28e2eadee 100644
   * Maintain binary backward compatibility.
   * Version script mechanism works with 'gcc' compatible compilers only.
 diff --git a/libdm/libdm-deptree.c b/libdm/libdm-deptree.c
-index ab0545659..00651c0b2 100644
+index ee12da2..08829c5 100644
 --- a/libdm/libdm-deptree.c
 +++ b/libdm/libdm-deptree.c
-@@ -3797,7 +3797,7 @@ void dm_tree_node_set_callback(struct dm_tree_node *dnode,
+@@ -3811,7 +3811,7 @@ void dm_tree_node_set_callback(struct dm_tree_node *dnode,
  	dnode->callback_data = data;
  }
  
@@ -261,10 +293,10 @@ index ab0545659..00651c0b2 100644
   * Backward compatible implementations.
   *
 diff --git a/libdm/libdm-stats.c b/libdm/libdm-stats.c
-index 94ad380e0..76efbbe35 100644
+index 420e3e1..066bcdf 100644
 --- a/libdm/libdm-stats.c
 +++ b/libdm/libdm-stats.c
-@@ -5065,7 +5065,7 @@ int dm_stats_start_filemapd(int fd, uint64_t group_id, const char *path,
+@@ -5067,7 +5067,7 @@ int dm_stats_start_filemapd(int fd, uint64_t group_id, const char *path,
   * current dm_stats_create_region() version.
   */
  
@@ -273,6 +305,40 @@ index 94ad380e0..76efbbe35 100644
  int dm_stats_create_region_v1_02_106(struct dm_stats *dms, uint64_t *region_id,
  				     uint64_t start, uint64_t len, int64_t step,
  				     int precise, const char *program_id,
+diff --git a/libdm/misc/dmlib.h b/libdm/misc/dmlib.h
+index 2ea05c1..c5b41aa 100644
+--- a/libdm/misc/dmlib.h
++++ b/libdm/misc/dmlib.h
+@@ -36,16 +36,16 @@
+  * macro DM_EXPORT_SYMBOL to export the function and bind it to the
+  * specified version string.
+  *
+- * Since versioning is only available when compiling with GCC the entire
+- * compatibility version should be enclosed in '#if defined(__GNUC__)',
+- * for example:
++ * Since versioning is only available when compiling with GCC
++ * and GLIBC the entire compatibility version should be enclosed
++ * in '#if defined(GNU_SYMVER)', for example:
+  *
+  *   int dm_foo(int bar)
+  *   {
+  *     return bar;
+  *   }
+  *
+- *   #if defined(__GNUC__)
++ *   #if defined(GNU_SYMVER)
+  *   // Backward compatible dm_foo() version 1.02.104
+  *   int dm_foo_v1_02_104(void);
+  *   int dm_foo_v1_02_104(void)
+@@ -62,7 +62,7 @@
+  * versions of library symbols prior to the introduction of symbol
+  * versioning: it must never be used for new symbols.
+  */
+-#if defined(__GNUC__)
++#if defined(GNU_SYMVER)
+ #define DM_EXPORT_SYMBOL(func, ver) \
+ 	__asm__(".symver " #func "_v" #ver ", " #func "@DM_" #ver )
+ #define DM_EXPORT_SYMBOL_BASE(func) \
 -- 
-2.18.0
+2.27.0
 
diff --git a/package/lvm2/0002-fix-stdio-usage.patch b/package/lvm2/0002-fix-stdio-usage.patch
new file mode 100644
index 0000000000..6f96c009b8
--- /dev/null
+++ b/package/lvm2/0002-fix-stdio-usage.patch
@@ -0,0 +1,71 @@
+From 912441055e57222111180eb5f3ca539d6df2592a Mon Sep 17 00:00:00 2001
+From: AlexTMjugador <AlexTMjugador@users.noreply.github.com>
+Date: Tue, 14 Jul 2020 14:51:52 +0200
+Subject: [PATCH] Fix stdio usage
+
+Patch adapted from https://gitweb.gentoo.org/proj/musl.git/commit/sys-fs?id=dd9fb6a3d6ce7edde08be0493686bcca41381ed1
+
+Signed-off-by: AlexTMjugador <AlexTMjugador@users.noreply.github.com>
+---
+ lib/log/log.c      | 6 ++++++
+ tools/lvmcmdline.c | 6 +++---
+ 2 files changed, 9 insertions(+), 3 deletions(-)
+
+diff --git a/lib/log/log.c b/lib/log/log.c
+index ebf26b4..7e81e5c 100644
+--- a/lib/log/log.c
++++ b/lib/log/log.c
+@@ -160,6 +160,7 @@ static void _check_and_replace_standard_log_streams(FILE *old_stream, FILE *new_
+  * Close and reopen standard stream on file descriptor fd.
+  */
+ int reopen_standard_stream(FILE **stream, const char *mode)
++#if defined(__GLIBC__)
+ {
+ 	int fd, fd_copy, new_fd;
+ 	const char *name;
+@@ -206,6 +207,11 @@ int reopen_standard_stream(FILE **stream, const char *mode)
+ 	*stream = new_stream;
+ 	return 1;
+ }
++#else
++{
++	return freopen(NULL, mode, *stream) != NULL;
++}
++#endif
+ 
+ void init_log_fn(lvm2_log_fn_t log_fn)
+ {
+diff --git a/tools/lvmcmdline.c b/tools/lvmcmdline.c
+index f147be3..1c4ac2e 100644
+--- a/tools/lvmcmdline.c
++++ b/tools/lvmcmdline.c
+@@ -3233,7 +3233,7 @@ static int _check_standard_fds(void)
+ 	int err = is_valid_fd(STDERR_FILENO);
+ 
+ 	if (!is_valid_fd(STDIN_FILENO) &&
+-	    !(stdin = fopen(_PATH_DEVNULL, "r"))) {
++	    !(freopen(_PATH_DEVNULL, "r", stdin))) {
+ 		if (err)
+ 			perror("stdin stream open");
+ 		else
+@@ -3243,7 +3243,7 @@ static int _check_standard_fds(void)
+ 	}
+ 
+ 	if (!is_valid_fd(STDOUT_FILENO) &&
+-	    !(stdout = fopen(_PATH_DEVNULL, "w"))) {
++	    !(freopen(_PATH_DEVNULL, "w", stdout))) {
+ 		if (err)
+ 			perror("stdout stream open");
+ 		/* else no stdout */
+@@ -3251,7 +3251,7 @@ static int _check_standard_fds(void)
+ 	}
+ 
+ 	if (!is_valid_fd(STDERR_FILENO) &&
+-	    !(stderr = fopen(_PATH_DEVNULL, "w"))) {
++	    !(freopen(_PATH_DEVNULL, "w", stderr))) {
+ 		printf("stderr stream open: %s\n",
+ 		       strerror(errno));
+ 		return 0;
+-- 
+2.27.0
+
diff --git a/package/lvm2/0002-udev-remove-unsupported-options-event-timeout-rule.patch b/package/lvm2/0002-udev-remove-unsupported-options-event-timeout-rule.patch
deleted file mode 100644
index f162ec58de..0000000000
--- a/package/lvm2/0002-udev-remove-unsupported-options-event-timeout-rule.patch
+++ /dev/null
@@ -1,33 +0,0 @@
-From 125f27ac37bc9b93cc96f64052b9681b3d479ee1 Mon Sep 17 00:00:00 2001
-From: Peter Rajnoha <prajnoha@redhat.com>
-Date: Tue, 13 Aug 2019 15:18:30 +0200
-Subject: [PATCH] udev: remove unsupported OPTIONS+="event_timeout" rule
-
-The OPTIONS+="event_timeout" is Unsupported since systemd/udev version 216,
-that is ~5 years ago.
-
-Since systemd/udev version 243, there's a new message printed if unsupported
-OPTIONS value is used:
-
-  Invalid value for OPTIONS key, ignoring: 'event_timeout=180'
-
-Resolves: https://bugzilla.redhat.com/show_bug.cgi?id=1740666
-
-Signed-off-by: Pascal de Bruijn <p.debruijn@unilogic.nl>
----
-diff --git a/udev/11-dm-lvm.rules.in b/udev/11-dm-lvm.rules.in
-index 91cb991..7c58994 100644
---- a/udev/11-dm-lvm.rules.in
-+++ b/udev/11-dm-lvm.rules.in
-@@ -37,8 +37,6 @@ ENV{DM_SUBSYSTEM_UDEV_FLAG0}!="1", ENV{DM_NOSCAN}=="1", ENV{DM_UDEV_DISABLE_OTHE
- 
- ENV{DM_UDEV_DISABLE_SUBSYSTEM_RULES_FLAG}=="1", GOTO="lvm_end"
- 
--OPTIONS+="event_timeout=180"
--
- # Do not create symlinks for inappropriate subdevices.
- ENV{DM_LV_NAME}=="pvmove?*|?*_vorigin", GOTO="lvm_disable"
- ENV{DM_LV_LAYER}=="?*", GOTO="lvm_disable"
--- 
-2.9.3
-
diff --git a/package/lvm2/0003-portability.patch b/package/lvm2/0003-portability.patch
new file mode 100644
index 0000000000..aa3d9f70a0
--- /dev/null
+++ b/package/lvm2/0003-portability.patch
@@ -0,0 +1,58 @@
+From 2e90df1dd4e591e19453fc89992cb02724f5c50a Mon Sep 17 00:00:00 2001
+From: AlexTMjugador <AlexTMjugador@users.noreply.github.com>
+Date: Tue, 14 Jul 2020 14:57:36 +0200
+Subject: [PATCH] Portability
+
+Patch adapted from https://gitweb.gentoo.org/proj/musl.git/commit/sys-fs?id=dd9fb6a3d6ce7edde08be0493686bcca41381ed1
+
+Signed-off-by: AlexTMjugador <AlexTMjugador@users.noreply.github.com>
+---
+ lib/mm/memlock.c                 | 4 ++++
+ libdaemon/server/daemon-server.c | 1 +
+ 2 files changed, 5 insertions(+)
+
+diff --git a/lib/mm/memlock.c b/lib/mm/memlock.c
+index aa47d66..9166da6 100644
+--- a/lib/mm/memlock.c
++++ b/lib/mm/memlock.c
+@@ -182,6 +182,7 @@ static void _allocate_memory(void)
+          *  MMAP'd memory directly. Since MMAP-as-MORECORE does not munmap the
+          *  memory on free(), this is good enough for our purposes.
+          */
++#ifdef __GLIBC__
+ 	while (missing > 0) {
+ 		struct mallinfo inf = mallinfo();
+ 		hblks = inf.hblks;
+@@ -209,14 +210,17 @@ static void _allocate_memory(void)
+ 			break;
+ 		}
+ 	}
++#endif
+ 
+ 	if ((_malloc_mem = malloc(_size_malloc)))
+ 		_touch_memory(_malloc_mem, _size_malloc);
+ 
++#ifdef __GLIBC__
+ 	/* free up the reserves so subsequent malloc's can use that memory */
+ 	for (i = 0; i < area; ++i)
+ 		free(areas[i]);
+ #endif
++#endif
+ }
+ 
+ static void _release_memory(void)
+diff --git a/libdaemon/server/daemon-server.c b/libdaemon/server/daemon-server.c
+index 0368a94..26d6325 100644
+--- a/libdaemon/server/daemon-server.c
++++ b/libdaemon/server/daemon-server.c
+@@ -16,6 +16,7 @@
+ #include "daemon-log.h"
+ #include "libdaemon/client/daemon-io.h"
+ 
++#include <fcntl.h>
+ #include <dlfcn.h>
+ #include <errno.h>
+ #include <pthread.h>
+-- 
+2.27.0
+
diff --git a/package/lvm2/Config.in b/package/lvm2/Config.in
index a9c5c453fc..a7d2299d63 100644
--- a/package/lvm2/Config.in
+++ b/package/lvm2/Config.in
@@ -27,29 +27,18 @@ if BR2_PACKAGE_LVM2
 config BR2_PACKAGE_LVM2_STANDARD_INSTALL
 	bool "standard install instead of only dmsetup"
 	default y if !BR2_PACKAGE_LVM2_DMSETUP_ONLY # legacy 2013.11
-	# http://lists.busybox.net/pipermail/buildroot/2016-August/170592.html
-	depends on !BR2_TOOLCHAIN_USES_MUSL
 	help
 	  Install the standard suite of lvm2 programs. When this option
 	  is not set, only dmsetup is installed.
 
-comment "lvm2 standard install needs a glibc or uClibc toolchain"
-	depends on BR2_TOOLCHAIN_USES_MUSL
-
 config BR2_PACKAGE_LVM2_APP_LIBRARY
 	bool "install application library"
-	# http://lists.busybox.net/pipermail/buildroot/2016-August/170592.html
-	depends on !BR2_TOOLCHAIN_USES_MUSL
 	select BR2_PACKAGE_LVM2_STANDARD_INSTALL
 	help
 	  Install application library (liblvm2app).
 
-comment "lvm2 application library needs a glibc or uClibc toolchain"
-	depends on BR2_TOOLCHAIN_USES_MUSL
-
 config BR2_PACKAGE_LVM2_LVMETAD
 	bool "install lvmetad"
-	depends on !BR2_TOOLCHAIN_USES_MUSL # lvm2-app-library
 	select BR2_PACKAGE_LVM2_APP_LIBRARY
 	help
 	  Install lvmetad
@@ -61,11 +50,8 @@ config BR2_PACKAGE_LVM2_LVMETAD
 	  system.  lvmetad can be a disadvantage when disk event
 	  notifications from the system are unreliable.
 
-comment "lvmetad daemon needs a glibc or uClibc toolchain"
-	depends on BR2_TOOLCHAIN_USES_MUSL
-
-endif
-
 comment "lvm2 needs a toolchain w/ threads, dynamic library"
 	depends on BR2_USE_MMU
 	depends on BR2_STATIC_LIBS || !BR2_TOOLCHAIN_HAS_THREADS
+
+endif
diff --git a/package/lvm2/lvm2.hash b/package/lvm2/lvm2.hash
index 3d560c4be3..c9761547d2 100644
--- a/package/lvm2/lvm2.hash
+++ b/package/lvm2/lvm2.hash
@@ -1,5 +1,5 @@
-# From ftp://sources.redhat.com/pub/lvm2/sha512.sum
-sha512 f421505551aec2a09bc862f2fcc1ee825bc4d94c53a01d13265631e99308d60fbca40112be5bc7824cce3ef223c0775d2f6c345f6a3f227229a0566c903841bf  LVM2.2.02.185.tgz
+# From ftp://sourceware.org/pub/lvm2/sha512.sum
+sha512 8540e46a6025ab14b592ccd9493b3224ffc0f962739a0a8de6d7b25c65c6ad96fc83ddb0e3d877b123a5e1b104476d0c20ccee2ead6d322257ec82ad1e3362d4  LVM2.2.03.09.tgz
 # Locally computed sha256 checksums
 sha256 e76fbcd2fb97cf202da330301327754d2db5c58b5b4bebd3a8a749393e7603d1  COPYING
 sha256 5df07007198989c622f5d41de8d703e7bef3d0e79d62e24332ee739a452af62a  COPYING.LIB
diff --git a/package/lvm2/lvm2.mk b/package/lvm2/lvm2.mk
index 76f800a15b..cde0fcda19 100644
--- a/package/lvm2/lvm2.mk
+++ b/package/lvm2/lvm2.mk
@@ -4,9 +4,9 @@
 #
 ################################################################################
 
-LVM2_VERSION = 2.02.185
+LVM2_VERSION = 2.03.09
 LVM2_SOURCE = LVM2.$(LVM2_VERSION).tgz
-LVM2_SITE = ftp://sources.redhat.com/pub/lvm2
+LVM2_SITE = ftp://sourceware.org/pub/lvm2
 LVM2_INSTALL_STAGING = YES
 LVM2_LICENSE = GPL-2.0, LGPL-2.1
 LVM2_LICENSE_FILES = COPYING COPYING.LIB
-- 
2.27.0

