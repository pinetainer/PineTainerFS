#!/bin/sh

# The kexec configuration file.
readonly KEXEC_CONFIG_FILE='/etc/kexec.conf'
# The default kexec configuration to use, if the
# previous file was not found.
readonly DEFAULT_KEXEC_CONFIG='KERNEL=/boot/Image'

# Remounts all the mounted filesystems in read-only
# mode, so that any cached write is synchronized to
# the storage devices and a dirty unmount would have
# no consequences.
# Returns an error status if the remount operation failed.
unmountFileSystems() {
	while read -r filesystem; do
		device="${filesystem%% *}"
		mountpoint="$(echo "$filesystem" | cut -f2 -d' ')"

		# Remount read-only, ignoring tmpfs filesystems
		if [ "$device" != 'tmpfs' ] && ! /bin/mount -o remount,ro "$device" "$mountpoint" >/dev/null 2>&1; then
			printf '! The filesystem at %s (%s) could not be remounted read-only.\n' "$mountpoint" "$device"
			sleep 2
			return 1
		fi
	done < /proc/mounts

	# Make sure the cached writes are synchronized
	/bin/sync
}

# Only do actual kexec reboot if a flag file does not exist
if ! [ -f "/run/no-kexec-reboot" ]; then
	echo 'Restart: trying kexec call...'

	# Read configuration parameters from KEXEC_CONFIG_FILE,
	# falling back to $DEFAULT_KEXEC_CONFIG if that does
	# not exist
	config=$(/bin/cat "$KEXEC_CONFIG_FILE" 2>/dev/null)
	config=${config:-$DEFAULT_KEXEC_CONFIG}

	echo "$config" | {
		# Parse each line (record) in the configuration file
		while read -r record; do
			case "$record" in
				KERNEL=*)
					kernel="${record#KERNEL=}"
					break;;
				APPEND=*)
					append="${record#APPEND=}"
					break;;
				COMMAND-LINE=*)
					command_line="${record#COMMAND-LINE=}"
					break;;
			esac
		done

		# The kernel parameter is mandatory
		if [ -z "$kernel" ]; then
			echo '! The configuration file %s does not contain what kernel to boot.' "$KEXEC_CONFIG_FILE"
			exit 1
		fi

		# Generate the kexec load call parameters
		generate_parameter() {
			initial_part="--$1="
			shift
			printf '%s"%s"' "$initial_part" "$@"
		}

		if [ -n "$append" ]; then
			append="$(generate_parameter 'append' "$append")"
		fi

		if [ -n "$command_line" ]; then
			command_line="$(generate_parameter 'command-line' "$command_line")"
		fi

		# Do the actual load
		do_kexec_load() {
			# --reuse-cmdline is needed for the kernel to correctly
			# initialize the memory map, and its absence causes a kernel
			# panic later on
			/usr/sbin/kexec -l "$kernel" -i --reuse-cmdline "$@"
		}
		do_kexec_load "$append" "$command_line" && \

		# Now unmount all the filesystems
		unmountFileSystems && \

		# And finally reboot the loaded kernel with kexec
		/usr/sbin/kexec -e

		# If we get to execute this code, the kexec call wasn't executed
		# or it failed
		echo '! kexec call failed. Jumping to the rest vector instead.'
		sleep 2
	}
fi

echo 'Restart: jumping to reset vector...'

# Unmount all filesystems, ignoring errors this time
unmountFileSystems

# Passthrough to reboot executable
/sbin/reboot "$@"
